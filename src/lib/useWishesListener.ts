import { useEffect, useState } from "react";
import {
  collection,
  onSnapshot,
  query,
  orderBy,
  DocumentData,
} from "firebase/firestore";
import { db } from "@/lib/firebase";
import { toast } from "react-toastify";
import { Wish } from "@/types/wish";

export const useWishesListener = () => {
  const [wishes, setWishes] = useState<Wish[]>([]);
  const [initialLoad, setInitialLoad] = useState(true); // C·ªù ƒë·ªÉ x√°c ƒë·ªãnh l·∫ßn t·∫£i ƒë·∫ßu ti√™n

  useEffect(() => {
    const wishesQuery = query(
      collection(db, "wishes"),
      orderBy("dateCreated", "desc")
    );

    const unsubscribe = onSnapshot(wishesQuery, (snapshot) => {
      const newWishes: Wish[] = [];

      snapshot.docChanges().forEach((change) => {
        const data = change.doc.data() as DocumentData;
        const wish: Wish = {
          id: change.doc.id,
          name: data.name,
          emailOrPhone: data.emailOrPhone,
          wish: data.wish,
          dateCreated: data.dateCreated,
        };

        if (change.type === "added") {
          newWishes.push(wish);

          // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i l·∫ßn t·∫£i ƒë·∫ßu ti√™n v√† l·ªùi ch√∫c c√≥ th·ªùi gian g·∫ßn v·ªõi hi·ªán t·∫°i
          if (!initialLoad) {
            const currentTime = new Date();
            const wishTime = wish.dateCreated.toDate(); // Firebase Timestamp

            // Ch·ªâ g·ªçi toast n·∫øu l·ªùi ch√∫c c√≥ th·ªùi gian g·∫ßn v·ªõi th·ªùi gian hi·ªán t·∫°i (1 ph√∫t ch·∫≥ng h·∫°n)
            if (Math.abs(currentTime.getTime() - wishTime.getTime()) < 6000) {
              toast.success(
                `üéâ ${wish.name} v·ª´a g·ª≠i l·ªùi ch√∫c ${
                  wish.wish ? wish.wish : ""
                }!`
              );
            }
          }
        }
      });

      if (initialLoad) {
        // N·∫øu l√† l·∫ßn ƒë·∫ßu ti√™n t·∫£i trang, ch·ªâ g√°n to√†n b·ªô d·ªØ li·ªáu m√† kh√¥ng hi·ªÉn th·ªã toast
        const allWishes = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...(doc.data() as Omit<Wish, "id">),
        }));

        setWishes(allWishes); // C·∫≠p nh·∫≠t danh s√°ch wishes
        setInitialLoad(false); // ƒê·∫∑t l·∫°i c·ªù khi ƒë√£ t·∫£i xong l·∫ßn ƒë·∫ßu
      } else {
        // N·∫øu kh√¥ng ph·∫£i l·∫ßn ƒë·∫ßu, c·∫≠p nh·∫≠t th√™m c√°c m·ª•c m·ªõi v√†o danh s√°ch
        setWishes((prev) => {
          const allWishes = [...newWishes, ...prev];
          // Lo·∫°i b·ªè c√°c m·ª•c tr√πng id
          const uniqueWishes = allWishes.filter(
            (value, index, self) =>
              index === self.findIndex((t) => t.id === value.id)
          );
          return uniqueWishes;
        });
      }
    });

    return () => unsubscribe();
  }, [initialLoad]);

  return wishes;
};
